//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Scaffold {
    using System;
    using System.Linq;
    using System.Collections.Generic;
    
    
    public partial class Generator : GeneratorBase {
        
        
        private string _MenuNameField;
        
        public string MenuName {
            get {
                return this._MenuNameField;
            }
        }
        
        private string _MenuFullNameField;
        
        public string MenuFullName {
            get {
                return this._MenuFullNameField;
            }
        }
        
        private string _MenuFilePathField;
        
        public string MenuFilePath {
            get {
                return this._MenuFilePathField;
            }
        }
        
        private string _UnityVersionField;
        
        public string UnityVersion {
            get {
                return this._UnityVersionField;
            }
        }
        
        private System.Collections.Generic.List<System.String> _LabelInfosField;
        
        public System.Collections.Generic.List<System.String> LabelInfos {
            get {
                return this._LabelInfosField;
            }
        }
        
        private System.Collections.Generic.List<System.String> _ButtonInfosField;
        
        public System.Collections.Generic.List<System.String> ButtonInfos {
            get {
                return this._ButtonInfosField;
            }
        }
        
        private System.Collections.Generic.List<System.String> _TextFieldInfosField;
        
        public System.Collections.Generic.List<System.String> TextFieldInfos {
            get {
                return this._TextFieldInfosField;
            }
        }
        
        private System.Collections.Generic.List<System.String> _ToggleInfosField;
        
        public System.Collections.Generic.List<System.String> ToggleInfos {
            get {
                return this._ToggleInfosField;
            }
        }
        
        private System.Collections.Generic.List<System.String> _ProgressBarInfosField;
        
        public System.Collections.Generic.List<System.String> ProgressBarInfos {
            get {
                return this._ProgressBarInfosField;
            }
        }

        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 12 "ScaffoldTextTemplate.tt"
            this.Write("\r\n");
            
            #line default
            #line hidden
            
            #line 18 "ScaffoldTextTemplate.tt"
            this.Write("\r\n//-----------------------------------------------------------------------------" +
                    "-\r\n// <auto-generated>\r\n//     This code was auto generated by PointLife-PPC-UiG" +
                    "en.\r\n//\r\n//     https://github.com/PointLife/PointLife-PPC-UiGen     \r\n//\r\n//   " +
                    "  UXML File:\t\t");
            
            #line default
            #line hidden
            
            #line 25 "ScaffoldTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( MenuFilePath ));
            
            #line default
            #line hidden
            
            #line 25 "ScaffoldTextTemplate.tt"
            this.Write("\r\n//     Generated on:\t");
            
            #line default
            #line hidden
            
            #line 26 "ScaffoldTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss") ));
            
            #line default
            #line hidden
            
            #line 26 "ScaffoldTextTemplate.tt"
            this.Write(" UTC\r\n//     Unity Version:\t");
            
            #line default
            #line hidden
            
            #line 27 "ScaffoldTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( UnityVersion ));
            
            #line default
            #line hidden
            
            #line 27 "ScaffoldTextTemplate.tt"
            this.Write("\r\n//     PL-PPC-UiGen:\tv0.1.0-beta\r\n//\r\n//     Changes to this file may cause inc" +
                    "orrect behavior and will be lost if\r\n//     the code is regenerated.\r\n// </auto-" +
                    "generated>\r\n//------------------------------------------------------------------" +
                    "------------\r\n");
            
            #line default
            #line hidden
            
            #line 34 "ScaffoldTextTemplate.tt"
  // Generate via t4 ScaffoldTextTemplate.tt -c Scaffold.Generator 
            
            #line default
            #line hidden
            
            #line 35 "ScaffoldTextTemplate.tt"
            this.Write("\r\nusing BrokeProtocol.Entities;\r\nusing System;\r\nusing System.Collections.Generic;" +
                    "\r\nusing BrokeProtocol.API;\r\nusing PointLife.UiGen.BaseFields;\r\n\r\nnamespace Point" +
                    "Life.UiGen.Scaffold\r\n{\r\n\tpublic abstract class scaffold_");
            
            #line default
            #line hidden
            
            #line 44 "ScaffoldTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( MenuFullName ));
            
            #line default
            #line hidden
            
            #line 44 "ScaffoldTextTemplate.tt"
            this.Write("\r\n\t{\r\n\t\tpublic scaffold_");
            
            #line default
            #line hidden
            
            #line 46 "ScaffoldTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( MenuFullName ));
            
            #line default
            #line hidden
            
            #line 46 "ScaffoldTextTemplate.tt"
            this.Write("(ShPlayer _player)\r\n\t\t{\r\n\t\t\tplayer = _player;\r\n\t\t\tMenuName = \"");
            
            #line default
            #line hidden
            
            #line 49 "ScaffoldTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( MenuName ));
            
            #line default
            #line hidden
            
            #line 49 "ScaffoldTextTemplate.tt"
            this.Write("\";\r\n\t\t\tHandler_");
            
            #line default
            #line hidden
            
            #line 50 "ScaffoldTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( MenuFullName ));
            
            #line default
            #line hidden
            
            #line 50 "ScaffoldTextTemplate.tt"
            this.Write(".Data[player] = this;\r\n\t\t\tplayer.svPlayer.VisualTreeAssetClone(MenuName);\r\n\t\t\tpla" +
                    "yer.svPlayer.VisualElementVisibility(MenuName, false);\r\n\r\n");
            
            #line default
            #line hidden
            
            #line 54 "ScaffoldTextTemplate.tt"
 foreach (string name in ButtonInfos) { 
            
            #line default
            #line hidden
            
            #line 55 "ScaffoldTextTemplate.tt"
            this.Write("\t\t\tplayer.svPlayer.AddButtonClickedEvent(\"");
            
            #line default
            #line hidden
            
            #line 55 "ScaffoldTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( name ));
            
            #line default
            #line hidden
            
            #line 55 "ScaffoldTextTemplate.tt"
            this.Write("\", \"");
            
            #line default
            #line hidden
            
            #line 55 "ScaffoldTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( MenuFullName ));
            
            #line default
            #line hidden
            
            #line 55 "ScaffoldTextTemplate.tt"
            this.Write("_Events\");\r\n");
            
            #line default
            #line hidden
            
            #line 56 "ScaffoldTextTemplate.tt"
 } 
            
            #line default
            #line hidden
            
            #line 57 "ScaffoldTextTemplate.tt"
            this.Write("\r\n\t\t\tFields = new(player);\r\n\t\t}\r\n\r\n");
            
            #line default
            #line hidden
            
            #line 61 "ScaffoldTextTemplate.tt"
 foreach (string name in ButtonInfos) {
	if(name.EndsWith("CloseMenu")) 
	{
	
            
            #line default
            #line hidden
            
            #line 65 "ScaffoldTextTemplate.tt"
            this.Write("\t\tpublic virtual void On_");
            
            #line default
            #line hidden
            
            #line 65 "ScaffoldTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( name.Split('_').Last() ));
            
            #line default
            #line hidden
            
            #line 65 "ScaffoldTextTemplate.tt"
            this.Write("_Pressed()\r\n\t\t{\r\n\t\t\tthis.Close();\r\n\t\t}\r\n");
            
            #line default
            #line hidden
            
            #line 69 "ScaffoldTextTemplate.tt"
 
	}
	else 
	 {

            
            #line default
            #line hidden
            
            #line 74 "ScaffoldTextTemplate.tt"
            this.Write("\t\tpublic abstract void On_");
            
            #line default
            #line hidden
            
            #line 74 "ScaffoldTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( name.Split('_').Last() ));
            
            #line default
            #line hidden
            
            #line 74 "ScaffoldTextTemplate.tt"
            this.Write("_Pressed();\r\n");
            
            #line default
            #line hidden
            
            #line 75 "ScaffoldTextTemplate.tt"
 
}
} 
            
            #line default
            #line hidden
            
            #line 78 "ScaffoldTextTemplate.tt"
            this.Write(@"
		public virtual void Open()
		{
			MenuOpen = true;
			player.svPlayer.CursorVisibility(true);
			player.svPlayer.VisualElementVisibility(MenuName, true);
		}

		public virtual void Close()
		{
			MenuOpen = false;

			player.svPlayer.CursorVisibility(false);
			player.svPlayer.VisualElementVisibility(MenuName, false);
			player.svPlayer.VisualElementRemove(MenuName);

		}

		public string MenuName { get; private set; }
		public bool MenuOpen { get; private set; } = false;

		public ShPlayer player;

		public Fields_");
            
            #line default
            #line hidden
            
            #line 101 "ScaffoldTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( MenuFullName ));
            
            #line default
            #line hidden
            
            #line 101 "ScaffoldTextTemplate.tt"
            this.Write(" Fields { get; set; }\r\n\t}\r\n\r\n\tpublic class Fields_");
            
            #line default
            #line hidden
            
            #line 104 "ScaffoldTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( MenuFullName ));
            
            #line default
            #line hidden
            
            #line 104 "ScaffoldTextTemplate.tt"
            this.Write(" : BaseMenuFields\r\n\t{\r\n");
            
            #line default
            #line hidden
            
            #line 106 "ScaffoldTextTemplate.tt"
 foreach (string name in TextFieldInfos) { 
            
            #line default
            #line hidden
            
            #line 107 "ScaffoldTextTemplate.tt"
            this.Write("\t\tpublic TextField Text_");
            
            #line default
            #line hidden
            
            #line 107 "ScaffoldTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( name.Split('_').Last() ));
            
            #line default
            #line hidden
            
            #line 107 "ScaffoldTextTemplate.tt"
            this.Write(" { get; private set; }\r\n");
            
            #line default
            #line hidden
            
            #line 108 "ScaffoldTextTemplate.tt"
 } 
            
            #line default
            #line hidden
            
            #line 109 "ScaffoldTextTemplate.tt"
            this.Write("\r\n");
            
            #line default
            #line hidden
            
            #line 110 "ScaffoldTextTemplate.tt"
 foreach (string name in LabelInfos) { 
            
            #line default
            #line hidden
            
            #line 111 "ScaffoldTextTemplate.tt"
            this.Write("\t\tpublic TextElement Label_");
            
            #line default
            #line hidden
            
            #line 111 "ScaffoldTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( name.Split('_').Last() ));
            
            #line default
            #line hidden
            
            #line 111 "ScaffoldTextTemplate.tt"
            this.Write(" { get; private set; }\r\n");
            
            #line default
            #line hidden
            
            #line 112 "ScaffoldTextTemplate.tt"
 } 
            
            #line default
            #line hidden
            
            #line 113 "ScaffoldTextTemplate.tt"
            this.Write("\r\n");
            
            #line default
            #line hidden
            
            #line 114 "ScaffoldTextTemplate.tt"
 foreach (string name in ToggleInfos) { 
            
            #line default
            #line hidden
            
            #line 115 "ScaffoldTextTemplate.tt"
            this.Write("\t\tpublic CheckboxField Toggle_");
            
            #line default
            #line hidden
            
            #line 115 "ScaffoldTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( name.Split('_').Last() ));
            
            #line default
            #line hidden
            
            #line 115 "ScaffoldTextTemplate.tt"
            this.Write(" { get; private set; }\r\n");
            
            #line default
            #line hidden
            
            #line 116 "ScaffoldTextTemplate.tt"
 } 
            
            #line default
            #line hidden
            
            #line 117 "ScaffoldTextTemplate.tt"
            this.Write("\r\n");
            
            #line default
            #line hidden
            
            #line 118 "ScaffoldTextTemplate.tt"
 foreach (string name in ProgressBarInfos) { 
            
            #line default
            #line hidden
            
            #line 119 "ScaffoldTextTemplate.tt"
            this.Write("\t\tpublic ProgressBarField ProgressBar_");
            
            #line default
            #line hidden
            
            #line 119 "ScaffoldTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( name.Split('_').Last() ));
            
            #line default
            #line hidden
            
            #line 119 "ScaffoldTextTemplate.tt"
            this.Write(" { get; private set; }\r\n");
            
            #line default
            #line hidden
            
            #line 120 "ScaffoldTextTemplate.tt"
 } 
            
            #line default
            #line hidden
            
            #line 121 "ScaffoldTextTemplate.tt"
            this.Write("\r\n\t\tpublic Fields_");
            
            #line default
            #line hidden
            
            #line 122 "ScaffoldTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( MenuFullName ));
            
            #line default
            #line hidden
            
            #line 122 "ScaffoldTextTemplate.tt"
            this.Write("(ShPlayer player) : base()\r\n\t\t{\r\n");
            
            #line default
            #line hidden
            
            #line 124 "ScaffoldTextTemplate.tt"
 foreach (string name in TextFieldInfos) { 
            
            #line default
            #line hidden
            
            #line 125 "ScaffoldTextTemplate.tt"
            this.Write("\t\t\tText_");
            
            #line default
            #line hidden
            
            #line 125 "ScaffoldTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( name.Split('_').Last() ));
            
            #line default
            #line hidden
            
            #line 125 "ScaffoldTextTemplate.tt"
            this.Write(" = new(\"");
            
            #line default
            #line hidden
            
            #line 125 "ScaffoldTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( name ));
            
            #line default
            #line hidden
            
            #line 125 "ScaffoldTextTemplate.tt"
            this.Write("\", player, nameof(Handler_");
            
            #line default
            #line hidden
            
            #line 125 "ScaffoldTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( MenuFullName ));
            
            #line default
            #line hidden
            
            #line 125 "ScaffoldTextTemplate.tt"
            this.Write(".");
            
            #line default
            #line hidden
            
            #line 125 "ScaffoldTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( MenuFullName ));
            
            #line default
            #line hidden
            
            #line 125 "ScaffoldTextTemplate.tt"
            this.Write("_Inputs));\r\n\t\t\tFields.Add(Text_");
            
            #line default
            #line hidden
            
            #line 126 "ScaffoldTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( name.Split('_').Last() ));
            
            #line default
            #line hidden
            
            #line 126 "ScaffoldTextTemplate.tt"
            this.Write(");\r\n");
            
            #line default
            #line hidden
            
            #line 127 "ScaffoldTextTemplate.tt"
 } 
            
            #line default
            #line hidden
            
            #line 128 "ScaffoldTextTemplate.tt"
            this.Write("\r\n");
            
            #line default
            #line hidden
            
            #line 129 "ScaffoldTextTemplate.tt"
 foreach (string name in LabelInfos) { 
            
            #line default
            #line hidden
            
            #line 130 "ScaffoldTextTemplate.tt"
            this.Write("\t\t\tLabel_");
            
            #line default
            #line hidden
            
            #line 130 "ScaffoldTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( name.Split('_').Last() ));
            
            #line default
            #line hidden
            
            #line 130 "ScaffoldTextTemplate.tt"
            this.Write(" = new(\"");
            
            #line default
            #line hidden
            
            #line 130 "ScaffoldTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( name ));
            
            #line default
            #line hidden
            
            #line 130 "ScaffoldTextTemplate.tt"
            this.Write("\", player, \"");
            
            #line default
            #line hidden
            
            #line 130 "ScaffoldTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( MenuFullName ));
            
            #line default
            #line hidden
            
            #line 130 "ScaffoldTextTemplate.tt"
            this.Write("_Inputs\");\r\n\t\t\t// Fields.Add(Label_");
            
            #line default
            #line hidden
            
            #line 131 "ScaffoldTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( name.Split('_').Last() ));
            
            #line default
            #line hidden
            
            #line 131 "ScaffoldTextTemplate.tt"
            this.Write(");\r\n");
            
            #line default
            #line hidden
            
            #line 132 "ScaffoldTextTemplate.tt"
 } 
            
            #line default
            #line hidden
            
            #line 133 "ScaffoldTextTemplate.tt"
            this.Write("\r\n");
            
            #line default
            #line hidden
            
            #line 134 "ScaffoldTextTemplate.tt"
 foreach (string name in ToggleInfos) { 
            
            #line default
            #line hidden
            
            #line 135 "ScaffoldTextTemplate.tt"
            this.Write("\t\t\tToggle_");
            
            #line default
            #line hidden
            
            #line 135 "ScaffoldTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( name.Split('_').Last() ));
            
            #line default
            #line hidden
            
            #line 135 "ScaffoldTextTemplate.tt"
            this.Write(" = new(\"");
            
            #line default
            #line hidden
            
            #line 135 "ScaffoldTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( name ));
            
            #line default
            #line hidden
            
            #line 135 "ScaffoldTextTemplate.tt"
            this.Write("\", player, nameof(Handler_");
            
            #line default
            #line hidden
            
            #line 135 "ScaffoldTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( MenuFullName ));
            
            #line default
            #line hidden
            
            #line 135 "ScaffoldTextTemplate.tt"
            this.Write(".");
            
            #line default
            #line hidden
            
            #line 135 "ScaffoldTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( MenuFullName ));
            
            #line default
            #line hidden
            
            #line 135 "ScaffoldTextTemplate.tt"
            this.Write("_ToggleData));\r\n\t\t\tFields.Add(Toggle_");
            
            #line default
            #line hidden
            
            #line 136 "ScaffoldTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( name.Split('_').Last() ));
            
            #line default
            #line hidden
            
            #line 136 "ScaffoldTextTemplate.tt"
            this.Write(");\r\n");
            
            #line default
            #line hidden
            
            #line 137 "ScaffoldTextTemplate.tt"
 } 
            
            #line default
            #line hidden
            
            #line 138 "ScaffoldTextTemplate.tt"
            this.Write("\r\n");
            
            #line default
            #line hidden
            
            #line 139 "ScaffoldTextTemplate.tt"
 foreach (string name in ProgressBarInfos) { 
            
            #line default
            #line hidden
            
            #line 140 "ScaffoldTextTemplate.tt"
            this.Write("\t\t\tProgressBar_");
            
            #line default
            #line hidden
            
            #line 140 "ScaffoldTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( name.Split('_').Last() ));
            
            #line default
            #line hidden
            
            #line 140 "ScaffoldTextTemplate.tt"
            this.Write(" = new(\"");
            
            #line default
            #line hidden
            
            #line 140 "ScaffoldTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( name ));
            
            #line default
            #line hidden
            
            #line 140 "ScaffoldTextTemplate.tt"
            this.Write("\", player, \"");
            
            #line default
            #line hidden
            
            #line 140 "ScaffoldTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( MenuFullName ));
            
            #line default
            #line hidden
            
            #line 140 "ScaffoldTextTemplate.tt"
            this.Write("_ProgressBarInput\");\r\n\t\t\t// Fields.Add(ProgressBar_");
            
            #line default
            #line hidden
            
            #line 141 "ScaffoldTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( name.Split('_').Last() ));
            
            #line default
            #line hidden
            
            #line 141 "ScaffoldTextTemplate.tt"
            this.Write(");\r\n");
            
            #line default
            #line hidden
            
            #line 142 "ScaffoldTextTemplate.tt"
 } 
            
            #line default
            #line hidden
            
            #line 143 "ScaffoldTextTemplate.tt"
            this.Write("\t\t}\r\n\t}\r\n\r\n\tpublic class Handler_");
            
            #line default
            #line hidden
            
            #line 146 "ScaffoldTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( MenuFullName ));
            
            #line default
            #line hidden
            
            #line 146 "ScaffoldTextTemplate.tt"
            this.Write("\r\n\t{\r\n\r\n\t\t[CustomTarget]\r\n\t\tpublic void ");
            
            #line default
            #line hidden
            
            #line 150 "ScaffoldTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( MenuFullName ));
            
            #line default
            #line hidden
            
            #line 150 "ScaffoldTextTemplate.tt"
            this.Write("_Events(ShEntity _sender, string element)\r\n\t\t{\r\n\t\t\tif (_sender is ShPlayer sender" +
                    " && Data.TryGetValue(sender, out var data))\r\n\t\t\t{\r\n");
            
            #line default
            #line hidden
            
            #line 154 "ScaffoldTextTemplate.tt"
 foreach (string name in ButtonInfos) { 
            
            #line default
            #line hidden
            
            #line 155 "ScaffoldTextTemplate.tt"
            this.Write("\t\t\t\tif (element == \"");
            
            #line default
            #line hidden
            
            #line 155 "ScaffoldTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( name ));
            
            #line default
            #line hidden
            
            #line 155 "ScaffoldTextTemplate.tt"
            this.Write("\")\r\n\t\t\t\t{\r\n\t\t\t\t\tdata.On_");
            
            #line default
            #line hidden
            
            #line 157 "ScaffoldTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( name.Split('_').Last() ));
            
            #line default
            #line hidden
            
            #line 157 "ScaffoldTextTemplate.tt"
            this.Write("_Pressed();\r\n\t\t\t\t}\r\n");
            
            #line default
            #line hidden
            
            #line 159 "ScaffoldTextTemplate.tt"
 } 
            
            #line default
            #line hidden
            
            #line 160 "ScaffoldTextTemplate.tt"
            this.Write("\t\t\t}\r\n\t\t}\r\n\r\n\t\t[CustomTarget]\r\n\t\tpublic void ");
            
            #line default
            #line hidden
            
            #line 164 "ScaffoldTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( MenuFullName ));
            
            #line default
            #line hidden
            
            #line 164 "ScaffoldTextTemplate.tt"
            this.Write("_ToggleData(ShEntity _sender, string element, bool content)\r\n\t\t{\r\n\t\t\tif (_sender " +
                    "is ShPlayer sender && Data.TryGetValue(sender, out var data))\r\n\t\t\t{\r\n");
            
            #line default
            #line hidden
            
            #line 168 "ScaffoldTextTemplate.tt"
 foreach (string name in ToggleInfos) { 
            
            #line default
            #line hidden
            
            #line 169 "ScaffoldTextTemplate.tt"
            this.Write("\t\t\t\tif (element == \"");
            
            #line default
            #line hidden
            
            #line 169 "ScaffoldTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( name ));
            
            #line default
            #line hidden
            
            #line 169 "ScaffoldTextTemplate.tt"
            this.Write("\")\r\n\t\t\t\t{\r\n\t\t\t\t\tdata.Fields.Toggle_");
            
            #line default
            #line hidden
            
            #line 171 "ScaffoldTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( name.Split('_').Last() ));
            
            #line default
            #line hidden
            
            #line 171 "ScaffoldTextTemplate.tt"
            this.Write("._DataReceivedFromClient(content);\r\n\t\t\t\t}\r\n");
            
            #line default
            #line hidden
            
            #line 173 "ScaffoldTextTemplate.tt"
 } 
            
            #line default
            #line hidden
            
            #line 174 "ScaffoldTextTemplate.tt"
            this.Write("\t\t\t}\r\n\t\t}\r\n\r\n\t\t[CustomTarget]\r\n\t\tpublic void ");
            
            #line default
            #line hidden
            
            #line 178 "ScaffoldTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( MenuFullName ));
            
            #line default
            #line hidden
            
            #line 178 "ScaffoldTextTemplate.tt"
            this.Write("_Inputs(ShEntity _sender, string element, string content)\r\n\t\t{\r\n\t\t\tif (_sender is" +
                    " ShPlayer sender && Data.TryGetValue(sender, out var data))\r\n\t\t\t{\r\n\r\n");
            
            #line default
            #line hidden
            
            #line 183 "ScaffoldTextTemplate.tt"
 foreach (string name in TextFieldInfos) { 
            
            #line default
            #line hidden
            
            #line 184 "ScaffoldTextTemplate.tt"
            this.Write("\t\t\t\tif (element == \"");
            
            #line default
            #line hidden
            
            #line 184 "ScaffoldTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( name ));
            
            #line default
            #line hidden
            
            #line 184 "ScaffoldTextTemplate.tt"
            this.Write("\")\r\n\t\t\t\t{\r\n\t\t\t\t\tdata.Fields.Text_");
            
            #line default
            #line hidden
            
            #line 186 "ScaffoldTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( name.Split('_').Last() ));
            
            #line default
            #line hidden
            
            #line 186 "ScaffoldTextTemplate.tt"
            this.Write("._DataReceivedFromClient(content);\r\n\t\t\t\t}\r\n");
            
            #line default
            #line hidden
            
            #line 188 "ScaffoldTextTemplate.tt"
 } 
            
            #line default
            #line hidden
            
            #line 189 "ScaffoldTextTemplate.tt"
            this.Write("\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpublic static Dictionary<ShPlayer, scaffold_");
            
            #line default
            #line hidden
            
            #line 193 "ScaffoldTextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( MenuFullName ));
            
            #line default
            #line hidden
            
            #line 193 "ScaffoldTextTemplate.tt"
            this.Write("> Data = new();\r\n\t}\r\n}");
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
            if ((this.Errors.HasErrors == false)) {
                if (((this.Session != null) 
                            && this.Session.ContainsKey("MenuName"))) {
                    object data = this.Session["MenuName"];
                    if (typeof(string).IsAssignableFrom(data.GetType())) {
                        this._MenuNameField = ((string)(data));
                    }
                    else {
                        this.Error("The type \'System.String\' of the parameter \'MenuName\' did not match the type passe" +
                                "d to the template");
                    }
                }
                if (((this.Session != null) 
                            && this.Session.ContainsKey("MenuFullName"))) {
                    object data = this.Session["MenuFullName"];
                    if (typeof(string).IsAssignableFrom(data.GetType())) {
                        this._MenuFullNameField = ((string)(data));
                    }
                    else {
                        this.Error("The type \'System.String\' of the parameter \'MenuFullName\' did not match the type p" +
                                "assed to the template");
                    }
                }
                if (((this.Session != null) 
                            && this.Session.ContainsKey("MenuFilePath"))) {
                    object data = this.Session["MenuFilePath"];
                    if (typeof(string).IsAssignableFrom(data.GetType())) {
                        this._MenuFilePathField = ((string)(data));
                    }
                    else {
                        this.Error("The type \'System.String\' of the parameter \'MenuFilePath\' did not match the type p" +
                                "assed to the template");
                    }
                }
                if (((this.Session != null) 
                            && this.Session.ContainsKey("UnityVersion"))) {
                    object data = this.Session["UnityVersion"];
                    if (typeof(string).IsAssignableFrom(data.GetType())) {
                        this._UnityVersionField = ((string)(data));
                    }
                    else {
                        this.Error("The type \'System.String\' of the parameter \'UnityVersion\' did not match the type p" +
                                "assed to the template");
                    }
                }
                if (((this.Session != null) 
                            && this.Session.ContainsKey("LabelInfos"))) {
                    object data = this.Session["LabelInfos"];
                    if (typeof(System.Collections.Generic.List<System.String>).IsAssignableFrom(data.GetType())) {
                        this._LabelInfosField = ((System.Collections.Generic.List<System.String>)(data));
                    }
                    else {
                        this.Error("The type \'System.Collections.Generic.List<System.String>\' of the parameter \'Label" +
                                "Infos\' did not match the type passed to the template");
                    }
                }
                if (((this.Session != null) 
                            && this.Session.ContainsKey("ButtonInfos"))) {
                    object data = this.Session["ButtonInfos"];
                    if (typeof(System.Collections.Generic.List<System.String>).IsAssignableFrom(data.GetType())) {
                        this._ButtonInfosField = ((System.Collections.Generic.List<System.String>)(data));
                    }
                    else {
                        this.Error("The type \'System.Collections.Generic.List<System.String>\' of the parameter \'Butto" +
                                "nInfos\' did not match the type passed to the template");
                    }
                }
                if (((this.Session != null) 
                            && this.Session.ContainsKey("TextFieldInfos"))) {
                    object data = this.Session["TextFieldInfos"];
                    if (typeof(System.Collections.Generic.List<System.String>).IsAssignableFrom(data.GetType())) {
                        this._TextFieldInfosField = ((System.Collections.Generic.List<System.String>)(data));
                    }
                    else {
                        this.Error("The type \'System.Collections.Generic.List<System.String>\' of the parameter \'TextF" +
                                "ieldInfos\' did not match the type passed to the template");
                    }
                }
                if (((this.Session != null) 
                            && this.Session.ContainsKey("ToggleInfos"))) {
                    object data = this.Session["ToggleInfos"];
                    if (typeof(System.Collections.Generic.List<System.String>).IsAssignableFrom(data.GetType())) {
                        this._ToggleInfosField = ((System.Collections.Generic.List<System.String>)(data));
                    }
                    else {
                        this.Error("The type \'System.Collections.Generic.List<System.String>\' of the parameter \'Toggl" +
                                "eInfos\' did not match the type passed to the template");
                    }
                }
                if (((this.Session != null) 
                            && this.Session.ContainsKey("ProgressBarInfos"))) {
                    object data = this.Session["ProgressBarInfos"];
                    if (typeof(System.Collections.Generic.List<System.String>).IsAssignableFrom(data.GetType())) {
                        this._ProgressBarInfosField = ((System.Collections.Generic.List<System.String>)(data));
                    }
                    else {
                        this.Error("The type \'System.Collections.Generic.List<System.String>\' of the parameter \'Progr" +
                                "essBarInfos\' did not match the type passed to the template");
                    }
                }
            }

        }
    }
    
    public class GeneratorBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
