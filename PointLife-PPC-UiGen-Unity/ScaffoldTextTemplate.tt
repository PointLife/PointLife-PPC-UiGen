<#@ template language="C#" debug="true"  #>
<#@ output extension=".cs" #>
<#@ assembly name="System.dll" #>
<#@ import namespace="System" #>
<#@ assembly name="System.Core.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter type="System.String" name="MenuName" #>
<#@ parameter type="System.String" name="MenuFullName" #>
<#@ parameter type="System.String" name="MenuFilePath" #>
<#@ parameter type="System.String" name="UnityVersion" #>

<#@ parameter type="System.Collections.Generic.List<System.String>" name="LabelInfos" #>
<#@ parameter type="System.Collections.Generic.List<System.String>" name="ButtonInfos" #>
<#@ parameter type="System.Collections.Generic.List<System.String>" name="TextFieldInfos" #>
<#@ parameter type="System.Collections.Generic.List<System.String>" name="ToggleInfos" #>
<#@ parameter type="System.Collections.Generic.List<System.String>" name="ProgressBarInfos" #>

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto generated by PointLife-PPC-UiGen.
//
//     https://github.com/PointLife/PointLife-PPC-UiGen     
//
//     UXML File:		<#= MenuFilePath #>
//     Generated on:	<#= DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss") #> UTC
//     Unity Version:	<#= UnityVersion #>
//     PL-PPC-UiGen:	v0.1.0-beta
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
<#  // Generate via t4 ScaffoldTextTemplate.tt -c Scaffold.Generator #>

using BrokeProtocol.Entities;
using System;
using System.Collections.Generic;
using BrokeProtocol.API;
using PointLife.UiGen.BaseFields;

namespace PointLife.UiGen.Scaffold
{
	public abstract class scaffold_<#= MenuFullName #>
	{
		public scaffold_<#= MenuFullName #>(ShPlayer _player)
		{
			player = _player;
			MenuName = "<#= MenuName #>";
			Handler_<#= MenuFullName #>.Data[player] = this;
			player.svPlayer.VisualTreeAssetClone(MenuName);
			player.svPlayer.VisualElementVisibility(MenuName, false);

<# foreach (string name in ButtonInfos) { #>
			player.svPlayer.AddButtonClickedEvent("<#= name #>", "<#= MenuFullName #>_Events");
<# } #>

			Fields = new(player);
		}

<# foreach (string name in ButtonInfos) {
	if(name.EndsWith("CloseMenu")) 
	{
	#>
		public virtual void On_<#= name.Split('_').Last() #>_Pressed()
		{
			this.Close();
		}
<# 
	}
	else 
	 {
#>
		public abstract void On_<#= name.Split('_').Last() #>_Pressed();
<# 
}
} #>

		public virtual void Open()
		{
			MenuOpen = true;
			player.svPlayer.CursorVisibility(true);
			player.svPlayer.VisualElementVisibility(MenuName, true);
		}

		public virtual void Close()
		{
			MenuOpen = false;

			player.svPlayer.CursorVisibility(false);
			player.svPlayer.VisualElementVisibility(MenuName, false);
			player.svPlayer.VisualElementRemove(MenuName);

		}

		public string MenuName { get; private set; }
		public bool MenuOpen { get; private set; } = false;

		public ShPlayer player;

		public Fields_<#= MenuFullName #> Fields { get; set; }
	}

	public class Fields_<#= MenuFullName #> : BaseMenuFields
	{
<# foreach (string name in TextFieldInfos) { #>
		public TextField Text_<#= name.Split('_').Last() #> { get; private set; }
<# } #>

<# foreach (string name in LabelInfos) { #>
		public TextElement Label_<#= name.Split('_').Last() #> { get; private set; }
<# } #>

<# foreach (string name in ToggleInfos) { #>
		public CheckboxField Toggle_<#= name.Split('_').Last() #> { get; private set; }
<# } #>

<# foreach (string name in ProgressBarInfos) { #>
		public ProgressBarField ProgressBar_<#= name.Split('_').Last() #> { get; private set; }
<# } #>

		public Fields_<#= MenuFullName #>(ShPlayer player) : base()
		{
<# foreach (string name in TextFieldInfos) { #>
			Text_<#= name.Split('_').Last() #> = new("<#= name #>", player, nameof(Handler_<#= MenuFullName #>.<#= MenuFullName #>_Inputs));
			Fields.Add(Text_<#= name.Split('_').Last() #>);
<# } #>

<# foreach (string name in LabelInfos) { #>
			Label_<#= name.Split('_').Last() #> = new("<#= name #>", player, "<#= MenuFullName #>_Inputs");
			// Fields.Add(Label_<#= name.Split('_').Last() #>);
<# } #>

<# foreach (string name in ToggleInfos) { #>
			Toggle_<#= name.Split('_').Last() #> = new("<#= name #>", player, nameof(Handler_<#= MenuFullName #>.<#= MenuFullName #>_ToggleData));
			Fields.Add(Toggle_<#= name.Split('_').Last() #>);
<# } #>

<# foreach (string name in ProgressBarInfos) { #>
			ProgressBar_<#= name.Split('_').Last() #> = new("<#= name #>", player, "<#= MenuFullName #>_ProgressBarInput");
			// Fields.Add(ProgressBar_<#= name.Split('_').Last() #>);
<# } #>
		}
	}

	public class Handler_<#= MenuFullName #>
	{

		[CustomTarget]
		public void <#= MenuFullName #>_Events(ShEntity _sender, string element)
		{
			if (_sender is ShPlayer sender && Data.TryGetValue(sender, out var data))
			{
<# foreach (string name in ButtonInfos) { #>
				if (element == "<#= name #>")
				{
					data.On_<#= name.Split('_').Last() #>_Pressed();
				}
<# } #>
			}
		}

		[CustomTarget]
		public void <#= MenuFullName #>_ToggleData(ShEntity _sender, string element, bool content)
		{
			if (_sender is ShPlayer sender && Data.TryGetValue(sender, out var data))
			{
<# foreach (string name in ToggleInfos) { #>
				if (element == "<#= name #>")
				{
					data.Fields.Toggle_<#= name.Split('_').Last() #>._DataReceivedFromClient(content);
				}
<# } #>
			}
		}

		[CustomTarget]
		public void <#= MenuFullName #>_Inputs(ShEntity _sender, string element, string content)
		{
			if (_sender is ShPlayer sender && Data.TryGetValue(sender, out var data))
			{

<# foreach (string name in TextFieldInfos) { #>
				if (element == "<#= name #>")
				{
					data.Fields.Text_<#= name.Split('_').Last() #>._DataReceivedFromClient(content);
				}
<# } #>

			}
		}

		public static Dictionary<ShPlayer, scaffold_<#= MenuFullName #>> Data = new();
	}
}